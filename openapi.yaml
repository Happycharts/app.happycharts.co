openapi: 3.0.0
info:
  title: Hosted Trino Platform API
  version: 1.0.0
  description: API for managing a hosted Trino platform

servers:
  - url: https://api.hostedtrino.example.com/v1

paths:
  /users:
    get:
      summary: List users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /organizations:
    get:
      summary: List organizations
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      summary: Create a new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /queries:
    get:
      summary: List queries
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Query'
    post:
      summary: Submit a new query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
      responses:
        '202':
          description: Query accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'

  /queries/{queryId}:
    get:
      summary: Get query details
      parameters:
        - name: queryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'

  /catalogs:
    get:
      summary: List catalogs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Catalog'
    post:
      summary: Create a new catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogInput'
      responses:
        '201':
          description: Catalog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'

  /loaders:
    get:
      summary: List loaders
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loader'
    post:
      summary: Create a new loader
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoaderInput'
      responses:
        '201':
          description: Loader created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loader'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        organizationId:
          type: string

    UserInput:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        organizationId:
          type: string

    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    OrganizationInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Query:
      type: object
      properties:
        id:
          type: string
        sql:
          type: string
        status:
          type: string
          enum: [QUEUED, RUNNING, COMPLETED, FAILED]
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    QueryInput:
      type: object
      required:
        - sql
      properties:
        sql:
          type: string

    Catalog:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        connectionString:
          type: string

    CatalogInput:
      type: object
      required:
        - name
        - type
        - properties
      properties:
        name:
          type: string
          description: The name of the catalog
        type:
          type: string
          description: The connector type (e.g., hive, mysql, postgresql, mongodb)
        properties:
          type: object
          description: Connector-specific properties
          additionalProperties:
            type: string
          example:
            connector.name: mongodb
            mongodb.connection-url: mongodb://example.com:27017
            mongodb.database: mydb

    Loader:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        configuration:
          type: object

    LoaderInput:
      type: object
      required:
        - name
        - type
        - configuration
      properties:
        name:
          type: string
        type:
          type: string
        configuration:
          type: object